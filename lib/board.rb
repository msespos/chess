# frozen_string_literal: true

# rubocop:disable Metrics/ClassLength

# board class
class Board
  MINIMALIST_DASH = ' -'
  BLANK_SPOT = '    '
  BOARD_HEIGHT = 14
  BOARD_WIDTH = 18
  SHADED_PIECES = { pawn: " \u265F",
                    knight: " \u265E",
                    bishop: " \u265D",
                    rook: " \u265C",
                    queen: " \u265B",
                    king: " \u265A" }.freeze
  OUTLINED_PIECES = { pawn: " \u2659",
                      knight: " \u2658",
                      bishop: " \u2657",
                      rook: " \u2656",
                      queen: " \u2655",
                      king: " \u2654" }.freeze

  def initialize(bottom_color, minimalist_or_checkerboard, light_or_dark_font)
    @bottom_color = bottom_color
    @minimalist_or_checkerboard = minimalist_or_checkerboard
    @light_or_dark_font = light_or_dark_font
    set_up_pieces
    set_up_board
  end

  def set_up_pieces
    if @minimalist_or_checkerboard == :minimalist
      minimalist_pieces(:white)
      minimalist_pieces(:black)
    elsif @minimalist_or_checkerboard == :checkerboard
      checkerboard_pieces(:white)
      checkerboard_pieces(:black)
    end
  end

  def minimalist_pieces(color)
    if color == :white
      pieces = @light_or_dark_font == :light ? SHADED_PIECES : OUTLINED_PIECES
    elsif color == :black
      pieces = @light_or_dark_font == :light ? OUTLINED_PIECES : SHADED_PIECES
    end
    prefix = color == :white ? '@w_' : '@b_'
    pieces.each do |piece_as_symbol, code|
      piece = prefix + piece_as_symbol.to_s
      instance_variable_set(piece, code)
    end
  end

  def checkerboard_pieces(color)
    piece_prefix = color == :white ? '@w_' : '@b_'
    code_prefix = color == :white ? "\033[37m" : "\033[30m"
    code_suffix = " \033[0m"
    SHADED_PIECES.each do |piece_as_symbol, code|
      piece = piece_prefix + piece_as_symbol.to_s
      full_code = code_prefix + code + code_suffix
      instance_variable_set(piece, full_code)
    end
  end

  # build a board with initial setup
  def set_up_board
    @board = Array.new(BOARD_HEIGHT) { Array.new(BOARD_WIDTH) { nil } }
    letter_rows
    initial_minimalist_dashes
    number_columns
  end

  # used by #initial_board to generate the rows of letters
  # at the top and bottom of the board
  def letter_rows
    spacing = @minimalist_or_checkerboard == :minimalist ? nil : ' '
    [1, 12].each do |row|
      (0..7).each do |column|
        @board[row][0] = BLANK_SPOT
        @bottom_color == :white ? rightwards_letters(spacing, row, column) : leftwards_letters(spacing, row, column)
      end
    end
  end

  def rightwards_letters(spacing, row, column)
    @board[row][column + 1] = ' ' + (column + 97).chr + spacing.to_s
  end

  def leftwards_letters(spacing, row, column)
    @board[row][column + 1] = ' ' + (104 - column).chr + spacing.to_s
  end

  # used by #initial_board to generate the minimalist dashes in the middle of the board
  def initial_minimalist_dashes
    (5..8).each { |row| @board[row] = Array.new(10) { MINIMALIST_DASH } }
  end

  # used by #initial board to generate the numbers bordering the playing field rows
  # overwrite some of the minimalist dashes generated by #initial_board_minimalist_dashes
  # add spaces to the right of the board for putting captured pieces next to
  def number_columns
    @bottom_color == :white ? upwards_numbers : downwards_numbers
  end

  def upwards_numbers
    (3..10).each do |row|
      @board[row][0] = ' ' + (row - 2).to_s + '  '
      @board[row][9] = '   ' + (row - 2).to_s + '  '
    end
  end

  def downwards_numbers
    (3..10).each do |row|
      @board[row][0] = ' ' + (11 - row).to_s + '  '
      @board[row][9] = '   ' + (11 - row).to_s + '  '
    end
  end

  def to_s
    string = ''
    (0..BOARD_HEIGHT - 1).each do |row|
      (0..BOARD_WIDTH - 1).each { |column| string += @board[BOARD_HEIGHT - 1 - row][column].to_s }
      string += "\n"
    end
    string
  end

  # overwrite the 8x8 playing field section of the board using an 8x8 playing field input from Game
  # by accessing either nil or a piece from the playing field, and converting nil or the piece symbols
  # to Board constants that represent empty squares or the pieces
  def overwrite_playing_field(playing_field)
    (0..7).each do |column|
      (0..7).each do |row|
        @board[row + 3][column + 1] = if playing_field[column][row].nil?
                                        empty_square(row, column)
                                      else
                                        square_with_piece(row, column, playing_field)
                                      end
      end
    end
  end

  def empty_square(row, column)
    @minimalist_or_checkerboard == :minimalist ? MINIMALIST_DASH : checkerboard_square(row, column)
  end

  def square_with_piece(row, column, playing_field)
    piece_as_string = playing_field[column][row].to_s
    piece = instance_variable_get("@#{piece_as_string}")
    @minimalist_or_checkerboard == :minimalist ? piece : checkerboard_square(row, column, piece)
  end

  def checkerboard_square(row, column, piece = '   ')
    if row.even? && column.odd? || row.odd? && column.even?
      light_background_square(piece)
    else
      dark_background_square(piece)
    end
  end

  def light_background_square(piece)
    "\033[46m#{piece}\033[0m"
  end

  def dark_background_square(piece)
    "\033[44m#{piece}\033[0m"
  end

  # add the pieces from the Game 4x8 array of captured pieces to the board
  def add_captured_pieces(captured_pieces)
    (0..3).each do |row|
      (0..7).each do |column|
        next if captured_pieces[row][column].nil?

        place_captured_pieces_on_board(captured_pieces, row, column)
      end
    end
  end

  # used by add_captured_pieces to place the pieces
  def place_captured_pieces_on_board(captured_pieces, row, column)
    piece_as_string = captured_pieces[row][column].to_s
    piece = instance_variable_get("@#{piece_as_string}")
    [0, 1].include?(row) ? @board[row + 3][column + 10] = piece : @board[12 - row][column + 10] = piece
  end
end

# rubocop:enable Metrics/ClassLength
